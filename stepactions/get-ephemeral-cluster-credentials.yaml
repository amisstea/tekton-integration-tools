apiVersion: tekton.dev/v1alpha1
kind: StepAction
metadata:
  name: get-ephemeral-cluster-credentials
spec:
  image: registry.redhat.io/openshift4/ose-cli@sha256:15da03b04318bcc842060b71e9dd6d6c2595edb4e8fdd11b0c6781eeb03ca182
  params:
    - name: clusterName
      type: string
      description: The name of a ClusterTemplateInstance
    - name: credentials
      type: string
      description: A volume containing credentials to the remote cluster
    - name: kubeconfigSecretLabelSelector
      type: string
      default: toolchain.dev.openshift.com/spacerequest=eaas
      description: |
        A label selector used to identify the secret containing the hypershift hub cluster kubeconfig
    - name: insecureSkipTLSVerify
      type: string
      default: "false"
      description: >-
        Skip TLS verification when accessing the EaaS hub cluster.
        This should not be set to "true" in a production environment.
  results:
    - name: kubeconfig
      description: Relative path to the kubeconfig in the mounted volume
  env:
    - name: CLUSTER_NAME
      value: "$(params.clusterName)"
    - name: CLUSTER_KUBECONFIG
      value: "/credentials/$(params.clusterName)-kubeconfig"
    - name: LABEL_SELECTOR
      value: "$(params.kubeconfigSecretLabelSelector)"
    - name: INSECURE_SKIP_TLS_VERIFY
      value: "$(params.insecureSkipTLSVerify)"
  volumeMounts:
    - name: "$(params.credentials)"
      mountPath: /credentials
  script: |
    #!/bin/bash
    set -eo pipefail

    TMP_KUBECONFIG=$(mktemp)
    trap 'rm "$TMP_KUBECONFIG"' EXIT

    oc get secret -l $LABEL_SELECTOR -o jsonpath="{.items[0].data.kubeconfig}" | base64 -d > $TMP_KUBECONFIG
    OC=(oc --insecure-skip-tls-verify=$INSECURE_SKIP_TLS_VERIFY --kubeconfig=$TMP_KUBECONFIG)

    SECRET=$(${OC[*]} get cti $CLUSTER_NAME -o=jsonpath='{.status.kubeconfig.name}')
    echo "Found kubeconfig secret: $SECRET"
    ${OC[*]} get secret $SECRET -o go-template --template="{{.data.kubeconfig|base64decode}}" > $CLUSTER_KUBECONFIG
    echo "Wrote kubeconfig to $CLUSTER_KUBECONFIG"
    echo -n $(basename $CLUSTER_KUBECONFIG) > $(step.results.kubeconfig.path)
